/**Represents the Fraction type and related operations. */
class Fraction {

  field int numerator, denominator;
  /**Constructs a (reduced) fraction from the given numerator and denominator. */
  constructor Fraction new(int x, int y) {
    let numerator = x; let denominator = y;
    do reduce();  //reduces the Fraction
    return this;  //returns the base address of the new object
  }
  //Reduces this fraction.
  method void reduce() {
    var int g;
    let g = Math.gcd(numerator, denominator);
    if (g > 1) {let numerator = numerator / g; let denominator = denominator / g;}
    return;
  }
  /**Returns the sum of this fraction and the other one. */
  method Fraction plus(Fraction other) {
    var int sumNumerators;
    let sumNumerators = (numerator * other.getDenominator()) +
                        (other.getNumerator() * denominator);
    return Fraction.new(sumNumerators, denominator * other.getDenominator)
  }

  /** Prints this fraction in the format x/y */
  method void print() {
    do Output.printInt(numerator);
    do Output.printInt("/");
    do Output.printInt(denominator);
    return;
  }

  /**Disposes this fraction */
  method void dispose() {
    do Memory.deAlloc(this);  //uses an OS routine to recycle the object's Memory
    return;
  }
}
