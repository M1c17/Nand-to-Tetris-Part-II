<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<Subroutine_Dec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<Parameter_List>
</Parameter_List>
<symbol> ) </symbol>
<Subroutine_body>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> sum </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<let_Statement>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<expression_List>
<expression>
<term>
<string_constant> HOW MANY NUMBERS?  </string_constant>
</term>
<symbol> ) </symbol>
</expression>
</expression_List>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<expression_List>
<expression>
<term>
<identifier> length </identifier>
</term>
<symbol> ) </symbol>
</expression>
</expression_List>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integer_constant> 0 </integer_constant>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<while_Statement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> < </symbol>
<term>
<identifier> length </identifier>
</term>
<symbol> ) </symbol>
</expression>
<symbol> { </symbol>
<statements>
<let_Statement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<expression_List>
<expression>
<term>
<string_constant> ENTER THE NEXT NUMBER:  </string_constant>
</term>
<symbol> ) </symbol>
</expression>
</expression_List>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integer_constant> 1 </integer_constant>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
</statements>
<symbol> } </symbol>
</while_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integer_constant> 0 </integer_constant>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> sum </identifier>
<symbol> = </symbol>
<expression>
<term>
<integer_constant> 0 </integer_constant>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
<while_Statement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> < </symbol>
<term>
<identifier> length </identifier>
</term>
<symbol> ) </symbol>
</expression>
<symbol> { </symbol>
<statements>
<let_Statement>
<keyword> let </keyword>
<identifier> sum </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> sum </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
</expression>
</term>
</expression>
<symbol> ] </symbol>
<symbol> ; </symbol>
</let_Statement>
<let_Statement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integer_constant> 1 </integer_constant>
</term>
</expression>
<symbol> ; </symbol>
</let_Statement>
</statements>
<symbol> } </symbol>
</while_Statement>
<do_Statement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expression_List>
<expression>
<term>
<string_constant> THE AVERAGE IS:  </string_constant>
</term>
<symbol> ) </symbol>
</expression>
</expression_List>
<symbol> ; </symbol>
</do_Statement>
<do_Statement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<expression_List>
<expression>
<term>
<identifier> sum </identifier>
</term>
<symbol> / </symbol>
<term>
<identifier> length </identifier>
</term>
<symbol> ) </symbol>
</expression>
</expression_List>
<symbol> ; </symbol>
</do_Statement>
<do_Statement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<expression_List>
</expression_List>
<symbol> ) </symbol>
<symbol> ; </symbol>
</do_Statement>
<return_Statement>
<keyword> return </keyword>
<symbol> ; </symbol>
</return_Statement>
</statements>
<symbol> } </symbol>
</Subroutine_body>
</Subroutine_Dec>
<symbol> } </symbol>
</class>
